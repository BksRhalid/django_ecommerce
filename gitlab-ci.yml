# stages:
#   - build
#   - test
#   - deploy

# variables:
#   COMMIT_SHA: $CI_COMMIT_SHORT_SHA
#   COMMIT_BRANCH: $CI_COMMIT_REF_SLUG

# build web app:
#   stage: build
#   image: node:alpine
#   script:
#     - apk add --no-cache python make g++
#     - pip install -r requirements.txt
#     - docker-compose build
#     - docker-compose up -d
#   only:
#     - master
#   artifacts:
#     paths:
#       - dist/

# upload web app:
#   stage: deploy
#   image: alpine
#   dependencies:
#     - build web app
#   variables:
#     GIT_STRATEGY: none
#   before_script:
#     - apk add lftp
#   script:
#     - lftp -e "mirror -R dist www" -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST
#   only:
#     refs:
#       - master
#       # - develop


####### DJANGO #######

stages:
  - test
  - deploy

test:
  stage: test
  script:
    # this configures Django application to use attached postgres database that is run on `postgres` host
    - export DATABASE_URL=postgres://postgres:@postgres:5432/python-test-app
    - apt-get update -qy
    - apt-get install -y python-dev python-pip
    - pip install -r requirements.txt
    - python manage.py test

# staging:
#   stage: deploy
#   script:
#     - apt-get update -qy
#     - apt-get install -y ruby-dev
#     - gem install dpl
#     - dpl --provider=heroku --app=gitlab-ci-python-test-staging --api-key=$HEROKU_STAGING_API_KEY
#   only:
#     - master

# production:
#   stage: deploy
#   script:
#     - apt-get update -qy
#     - apt-get install -y ruby-dev
#     - gem install dpl
#     - dpl --provider=heroku --app=gitlab-ci-python-test-prod --api-key=$HEROKU_PRODUCTION_API_KEY
#   only:
#     - tags

staging:
    stage: deploy
    before_script:
      - apk add lftp
    script:
      - lftp -e "mirror -R dist www" -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST
    only:
      refs:
        - master
        # - develop
